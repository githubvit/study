djangoform

一、Django的Form验证
    a. 用户提交数据的验证
            1、创建模版                       class LoginForm(forms.Form):...
                from django import forms
                # 模版
                class LoginForm(forms.Form):
                    # 模版中的元素
                    user = forms.CharField(min_length=6,error_messages={"required": '用户名不能为空','min_length': '用户名长度不能小6'})
                    email = forms.EmailField(error_messages={"required": '邮箱不能为空','invalid': '邮箱格式错误'})

            2、创建一个模版对象，将请求交给模版    obj =LoginForm(request.POST)
                def login(request):
                if request.method == "GET":
                    # 数据库中获取
                    obj = LoginForm()#创建模板对象
                    return render(request,'login.html',{'oo': obj})
                elif request.method == "POST":
                    obj = LoginForm(request.POST)#创建模板对象
                    if obj.is_valid():#验证
                        value_dict = obj.clean()#获取正确信息
                        print(value_dict)
                        # create(**value_dict)
                    else:
                        # 封装了所有的错误信息
                        # print(obj.errors['email'][0])
                        # print(obj.errors["user"][0])
                        # print(type(error_obj))
                        from django.forms.utils import ErrorDict
                        pass

                    return render(request, 'login.html',{'oo': obj})

            3、进行验证 True、False            obj.is_valid()
                一定要先完成验证，才可以获取正确信息或错误信息
            4、获取正确信息                    obj.clean()
            5、获取错误信息                    obj.errors

    b. 错误信息提示
            Form提交，刷新页面的特性，模版对象内部值丰富，再显示时，值和错误信息都有

    c. 保留上一次提交的数据
            使用自动生成html标签，才能保留上一次提交的数据
            <form method="POST" action="/login.html">
                <p>
                    {{ oo.user }}
                    <span>{{ oo.errors.user.0 }}</span>

                </p>
                <p>
                    {{ oo.email }}
                    <span>{{ oo.errors.email.0 }}</span>
                </p>
                <p>
                    <input type="text" name="pwd" placeholder="密码" />
                </p>
                <input type="submit" value="提交"  /> {{ msg }}
                <input id="ajax_submit" type="button" value="Ajax提交"  />
            </form>

    注：
    1，Form提交使用 a,b,c
        如上
    2，ajax提交使用 a，错误信息处理： as_json() 前端两次反序列化   as_data()前端一次反序列化，后端要多一次数据转换

    def login_ajax(request):
    if request.method == "GET":
        return render(request, 'login_ajax.html')
    elif request.method == "POST":
        ret = {'status': True, 'error':None, 'data': None}
        obj = LoginForm(request.POST)
        if obj.is_valid():
            print(obj.clean())
        else:
            # 方式一
            # res_str = obj.errors.as_json() # res_str是一个字符串
            # ret['status'] = False
            # ret['error'] = res_str
            # 前端两次反序列化
            # 方式二：
            ret['status'] = False
            ret['error'] = obj.errors.as_data() # # {'user': [ValidationError(['用户名长度不能小6'])], 'email': [ValidationError(['邮箱格式错误'])]}
            # # 前端一次反序列化 后台数据转换cls=JsonCustomEncoder
        return HttpResponse(json.dumps(ret,cls=JsonCustomEncoder))
    #自定义数据转换函数
    from django.core.validators import ValidationError
    class JsonCustomEncoder(json.JSONEncoder):
        def default(self, field):
            if isinstance(field, ValidationError):
                return {'code': field.code, 'message': field.message}
            else:
                return json.JSONEncoder.default(self, field)

    <form id="f1">
    <p>
        <input id="u" type="text" name="user" placeholder="用户名" />

    </p>
    <p>
        <input id="e" type="text" name="email" placeholder="邮箱" />
    </p>
    <p>
        <input id="p" type="text" name="pwd" placeholder="密码" />
    </p>
    <input id="ajax_submit" type="button" value="Ajax提交"  />
        </form>
    <script src="/static/jquery-2.1.4.min.js"></script>
    <script>
        $(function () {
            $('#ajax_submit').click(function () {
                $.ajax({
                    url:"/login_ajax.html",
                    //data: {user: $('#u').val(), email: $('#e').val(), pwd: $('#p').val()},
                    data: $('#f1').serialize(),
                    type: 'POST',
                    success:function (arg) {

                        $('.error-msg').remove();
                        var v1 = JSON.parse(arg);
                        console.log(v1);
                        if(!v1.status){
                            // var error_obj = JSON.parse(v1.error);
                            var error_obj = v1.error;
                            $.each(error_obj,function (k,v) {
                                // k: user 或 email
                                // v: [{}{}{},]
                                var tag = document.createElement('span');
                                tag.className = 'error-msg';
                                tag.innerHTML = v[0].message;
                                $("input[name='" + k +"']").after(tag);
                            })
                        }else{
                            location.href = "/inde.html"
                        }
                        // { 'stauts': true, 'error':xx, 'data'：’‘}
                    }
                })
            })
        })
    </script>


二、Django自动生成html标签
    模板
        from django import forms
        from django.forms import fields
        from django.forms import widgets
        class MyForm(forms.Form):
            user1 = fields.CharField()
            user2 = fields.CharField(widget=widgets.TextInput(attrs={'class': 'c1','placeholder': '用户名'}))

            user3 = fields.ChoiceField(choices=[(1, 'SH'), (2, 'BJ'), ])的本质就是：
                user3 = fields.CharField(widget=widgets.Select(choices=[(1, 'SH'), (2, 'BJ'), ]))

        类：模版，到底验证几个
        字段：用于验证用户某个字段
        插件：user = forms.CharField(..,widget=Input框)
        PS: 类型转换,本来request.POST拿到的是字符串，当使用form自动HTML时，
            使用obj = LoginForm(request.POST)获取前端数据，会按模板字段转成相应类型。
        ----------------------------------------------------------------------
        字段及字段里的参数：
            Field
                required=True,               不允许为空
                widget=None,                 HTML插件
                initial=None,                初始值
                validators=[],               自定义验证规则
                    from django.core.validators import RegexValidator
                    validators=[RegexValidator(r'^[0-9]+$', '请输入数字'),RegexValidator(r'^159[0-9]+$', '数字必须以159开头')],
                error_messages=None,         错误信息error_messages={'required': '不能为空', 'invalid': '格式错误'}
                    error_messages={code: message},优先级高于validators中定义的消息，
                    因此，可以先在validators中定义code
                    validators=[RegexValidator(r'^[0-9]+$',code='em1'),RegexValidator(r'^159[0-9]+$',code='em2')]
                    然后，在error_messages中定义
                    error_messages={'required': '不能为空', 'em1': '请输入数字','em2':'数字必须以159开头'}

                help_text='',                帮助信息(在标签旁边显示)
                show_hidden_initial=False,   是否在当前插件后面再加一个隐藏的且具有默认值的插件（可用于检验两次输入是否一直）
                localize=False,              是否支持本地化（对于错误提示：中国人访问的时候出什么错，老外访问的时候出什么错）
                disabled=False,              是否可以编辑
                label=None,                  用于生成Label标签或显示内容(前端{{obj.字段.label_tag}})
                label_suffix=None            Label内容后缀（取代冒号，比如label_suffix='-->'）


            CharField(Field)
                max_length=None,             最大长度
                min_length=None,             最小长度
                strip=True                   是否移除用户输入空白

            IntegerField(Field)
                max_value=None,              最大值
                min_value=None,              最小值

            DecimalField(IntegerField)
                max_value=None,              最大值
                min_value=None,              最小值
                max_digits=None,             总长度
                decimal_places=None,         小数位长度


            RegexField(CharField)--用来自定义字段类型的
                regex,                      自定制正则表达式
                max_length=None,            最大长度
                min_length=None,            最小长度
                error_message=None,         如果忽略，错误信息使用 error_messages={'invalid': '...'}

                比如：f2=fields.RegexField(r'^159[0-9]+$')

            IP,Email,URL,Slug+Field

            下面两个类型是用来上传文件的，实际本质是一样的
            FileField(Field)
                allow_empty_file=False     是否允许空文件

            ImageField(FileField)
                ...
                注：需要PIL模块，pip3 install Pillow
            以上两个字段类型使用时，需要注意两点：
                - form表单中 enctype="multipart/form-data"
                - view函数中 obj = MyForm(request.POST, request.FILES)

            单值：
            ChoiceField(Field)
                ...
                choices=(),                选项，如：choices = ((0,'上海'),(1,'北京'),)
                required=True,             是否必填
                widget=None,               插件，默认select插件
                label=None,                Label内容
                initial=None,              初始值
                help_text='',              帮助提示

            TypedChoiceField(ChoiceField)
                coerce = lambda val: val   对选中的值进行一次转换
                empty_value= ''            空值的默认值

                TypedChoiceField比ChoiceField多了类型转换功能通过coerce
                比如：
                    f4=fields.ChoiceField(
                        initial=2,
                        choices=[(1,'张三'),(2,'李四'),(3,'王五'),(4,'赵六')]
                    )
                    从f4取得的值都是字符串
                    f5=fields.TypedChoiceField(
                        coerce=lambda x:int(x),
                        initial=2,
                        choices=[(1,'张三'),(2,'李四'),(3,'王五'),(4,'赵六')]
                    )
                    从f5取得的值就是数字了。
            多值：
            MultipleChoiceField(ChoiceField)
                ...
                比如：
                f4=fields.ChoiceField(
                    initial=[1,2],#多值
                    choices=[(1,'张三'),(2,'李四'),(3,'王五'),(4,'赵六')]
                )

            TypedMultipleChoiceField(MultipleChoiceField)
                coerce = lambda val: val   对选中的每一个值进行一次转换
                empty_value= ''            空值的默认值

            组合：
            ComboField(Field)
                fields=()                  使用多个验证，如下：即验证最大长度20，又验证邮箱格式
                                           fields.ComboField(fields=[fields.CharField(max_length=20), fields.EmailField(),])

            扩展：
            MultiValueField(Field) 本身没什么，是用来继承实现聚合扩展的
                PS: 抽象类，子类中可以实现聚合多个字典去匹配一个值，要配合MultiWidget使用
            是扩展的子类，聚合了年月日框和时分秒框两个input框
            SplitDateTimeField(MultiValueField)
                input_date_formats=None,   格式列表：['%Y--%m--%d', '%m%d/%Y', '%m/%d/%y']
                input_time_formats=None    格式列表：['%H:%M:%S', '%H:%M:%S.%f', '%H:%M']

            列出文件路径，通过select框列出来的
            FilePathField(ChoiceField)     文件选项，目录下文件显示在页面中
                path,                      文件夹路径
                match=None,                正则匹配(比如只匹配.py)
                recursive=False,           递归下面的文件夹(默认不允许)
                allow_files=True,          允许文件
                allow_folders=False,       允许文件夹(默认不允许)
                required=True,
                widget=None,
                label=None,
                initial=None,
                help_text=''
            其余：
            GenericIPAddressField
                protocol='both',           both,ipv4,ipv6支持的IP格式
                unpack_ipv4=False          解析ipv4地址，如果是::ffff:192.0.2.1时候，可解析为192.0.2.1， PS：protocol必须为both才能启用

            SlugField(CharField)           数字，字母，下划线，减号（连字符）
                ...

            UUIDField(CharField)           uuid类型
            注：UUID是根据MAC以及当前时间等创建的不重复的随机字符串

            -------------------------------------------------------------------------------
            插件widget
            Django内置插件：
                TextInput(Input)
                NumberInput(TextInput)
                EmailInput(TextInput)
                URLInput(TextInput)
                PasswordInput(TextInput)
                HiddenInput(TextInput)
                Textarea(Widget)
                DateInput(DateTimeBaseInput)
                DateTimeInput(DateTimeBaseInput)
                TimeInput(DateTimeBaseInput)
                CheckboxInput
                Select
                NullBooleanSelect
                SelectMultiple
                RadioSelect
                CheckboxSelectMultiple
                FileInput
                ClearableFileInput
                MultipleHiddenInput
                SplitDateTimeWidget
                SplitHiddenDateTimeWidget
                SelectDateWidget

            插件使用：
                # 单radio，值为字符串
                # user = fields.CharField(
                #     initial=2,
                #     widget=widgets.RadioSelect(choices=((1,'上海'),(2,'北京'),))
                # )

                # 单radio，值为字符串
                # user = fields.ChoiceField(
                #     choices=((1, '上海'), (2, '北京'),),
                #     initial=2,
                #     widget=widgets.RadioSelect
                # )

                # 单select，值为字符串
                # user = fields.CharField(
                #     initial=2,
                #     widget=widgets.Select(choices=((1,'上海'),(2,'北京'),))
                # )

                # 单select，值为字符串
                # user = fields.ChoiceField(
                #     choices=((1, '上海'), (2, '北京'),),
                #     initial=2,
                #     widget=widgets.Select
                # )

                # 多选select，值为列表
                # user = fields.MultipleChoiceField(
                #     choices=((1,'上海'),(2,'北京'),),
                #     initial=[1,],
                #     widget=widgets.SelectMultiple
                # )


                # 单checkbox
                # user = fields.CharField(
                #     widget=widgets.CheckboxInput()
                # )


                # 多选checkbox,值为列表
                # user = fields.MultipleChoiceField(
                #     initial=[2, ],
                #     choices=((1, '上海'), (2, '北京'),),
                #     widget=widgets.CheckboxSelectMultiple
                # )
            在使用选择标签时，需要注意choices的选项可以从数据库中获取，
            但是由于是静态字段 ***获取的值无法实时更新***，
            那么需要自定义构造方法从而达到此目的。
                比如：
                    from app01 import models 引入数据库
                    class MyForm(forms.Form):
                       host=fields.CharField()
                       host_type=fields.IntegerField(
                           widget=widgets.Select(choices=[])
                       )
                       def __init__(self,*args,**kwargs):#自定义构造方法
                           super(MyForm,self).__init__(*args,**kwargs)#继承父类Form的构造方法
                           #找到字段host_type下的widget下的choices，从UserType表中获取values_list('id','caption')字段的值。
                           self.fields['host_type'].widget.choices=models.UserType.objects.all().values_list('id','caption')
                           #这样views每次页面GET时，模板对象都会实时更新choices。
                           #从而保证页面对应的select下拉框的数据是最新的。
                    def db(request):
                        frome app01 import forms
                        if request.method=='GET'：
                            obj=forms.MyForm()
                            return render(request,'db.html',{'obj':obj})

                    {{obj.host}}
                    {{obj.host_type}}
            新URL方式(get方式)编辑时，默认选中
                利用form对象可以接受字典参数的特性，字典的key必须和form的字段名一致。
                models:
                class UserInfo(models.Model):
                    name=models.CharField(max_length=32)
                    ut=models.ForeignKey('UserType')
                class UserType(models.Model):
                    caption=models.CharField(max_length=32)

                Form:
                from app01 import models
                class EuForm(Forms.Form):
                    username=fields.CharField()
                    user_type=fields.IntegerField(
                        widgets.Select(choice=[])
                    )
                    def __init__(self,*args,**kwargs):
                        super(EuForm,self).__init__(*args,**kwargs)
                        self.fields['user_type'].widget.choices=models.UserType.objects.all().values_list('id','caption')
                views:
                def edit_user(request):
                    frome app01 import forms
                    frome app01 import models
                    #新url访问编辑页面形式：edit_user.html?nid=1
                    if request.method=='GET':
                        nid=request.GET.get('nid')
                        m=models.UserInfo.objects.filter(id=nid).first
                        dic={'username':m.name,'user_type':m.ut_id}
                        #假设form有个favor字段是多选，就要传递列表
                        #dic={'username':m.name,'user_type':m.ut_id,'favor':[1,2,3]}
                        obj=forms.EuForm(dic)
                        return render(request,'edit_user.html',{'obj':obj})

                html：edit_user.html
                    {{obj.username}}
                    {{obj.user_type}}