多对多及一对多组合搜索功能实现

实例部分参见python全栈工程师 4
0031-django官网项目之组合搜索功能准备-VIP课程 开始时间08:00
...
0039-django官网项目之组合搜索功能实现7-VIP课程

1，表间关系
视频表-->难度：初级、中级、高级,难度是不太变的不变的元素
    这些不变的元素放在内存里即可，省去了数据库表的查询，提高效率加快访问速度。
    因此在视频表中构建level_choice内存表和level字段，用admin的choices参数连接即可。
    level_choice=(
        (1,u'初级'),#python2.7加上u，python3.x不用
        (2,u'中级'),
        (3,u'高级'),
    )
    level=models.IntegerField(verbose_name='级别'，choices=level_choice,default=1)

视频表--> 分类表:多对一
    视频表中构建外键
    classification=models.ForeignKey('Classification',null=True,blank=True)

分类表-->方向表：多对多
    构建第三张表,两个ForeignKey，一个指向分类id，一个指向方向id
    id 分类ID 方向ID
    1    1      2
    2    2      2
    3    3      2
    4    3      1
    5    4      1
    6    3      3
    7    3      4
   ....
 比如：找到方向2下的所有视频
   select 分类id from 第三张表 where 方向id=2
   结果：分类ID[1,2,3]
   select * from 视频表 where 分类id in [1,2,3]
   因此：
   select * from 视频表 where 分类id in (select 分类id from 第三张表 where 方向id=2)

 网页内容如下：

        选择：

           方向：全部 运维自动化 运维 虚拟化 测试
           分类：全部 python JavaScript openstack Linux
           难度：全部 初级 中级 高级

 要求：
      a,默认都是全部：方向、分类、难度要全部列出来.
      b,方向是总起点，始终在页面呈现出来。
      c,分类要根据方向呈现，只显示该方向下的分类，当方向是全部时，列出所有分类。

      
2,选择中每个a标签中的动态href生成---用simple_tag实现
    实例部分参见python全栈工程师 4
    0034-django官网项目之组合搜索功能实现2-VIP课程
    0035-django官网项目之组合搜索功能实现3-VIP课程

    2.1 构建url：实例汽车之家

        格式：videos-0-0-0.html
        说明：videos-方向id-分类id-级别id（难度）.html
        目的：通过url实现组合筛选出视频

      网页内容如下：

        选择：

           方向：全部 运维自动化 运维 虚拟化 测试
           分类：全部 python JavaScript openstack Linux
           难度：全部 初级 中级 高级

      要求：
        a,默认都是全部：方向、分类、难度要全部列出来.
        b,方向是总起点，始终在页面呈现出来。
        c,分类要根据方向呈现，只显示该方向下的分类，当方向是全部时，列出所有分类。

      urls
         urlpatterns=[
            url(r'^video-(?p<direction_id>\d+)-(?p<classification_id>\d+)-(?p<level_id>\d+).html',views.video),
         ]#采用分组正则构建url，并方便向views传参

      views
         def video(reques,**kwargs)：
            print kwargs

      为什么选择中每个a标签中的href是动态的?
      我们知道，href的url和访问的url格式是一样的，
      而方向、分类、难度的选择是分别点击实现的，
      当方向选择1时，分类和难度中a标签的href的第一个数字都要为1，
      当方向选择2时，分类和难度中a标签的href的第一个数字都要为2，
      因此，每个a标签中的href是动态的。

    2.2 分析
         当访问的url为:video-0-0-0.html时，即方向、分类、难度都是全部
            print kwargs
            输出结果如下：
            {'direction_id':'0','classification_id':'0','level_id':'0'}

            在页面选择下的各个a标签中的href应该根据当前url生成
            即：
             方向：全部（0-0-0） 运维自动化（1-0-0） 运维（2-0-0） 虚拟化（3-0-0） 测试（4-0-0）
             分类：全部（0-0-0） python（0-1-0） JavaScript（0-2-0） openstack（0-3-0） Linux（0-4-0）
             难度：全部（0-0-0）初级（0-0-1） 中级（0-0-2） 高级（0-0-3）

         当访问的url为:video-0-0-1.html时，即方向、分类都是全部、难度选择了初级
            print kwargs
            输出结果如下：
            {'direction_id':'0','classification_id':'0','level_id':'1'}

            这时，页面的选择中的a标签变为：
             方向：全部（0-0-1） 运维自动化（1-0-1） 运维（2-0-1） 虚拟化（3-0-1） 测试（4-0-1）
             分类：全部（0-0-1） python（0-1-1） JavaScript（0-2-1） openstack（0-3-1） Linux（0-4-1）
             难度：全部（0-0-0）初级（0-0-1） 中级（0-0-2） 高级（0-0-3）

         当访问的url为:video-0-1-1.html时，即方向是全部、分类选择了python、难度选择了初级
            print kwargs
            输出结果如下：
            {'direction_id':'0','classification_id':'1','level_id':'1'}

            这时，页面的选择中的a标签变为：
             方向：全部（0-1-1） 运维自动化（1-1-1） 运维（2-1-1） 虚拟化（3-1-1） 测试（4-1-1）
             分类：全部（0-0-1） python（0-1-1） JavaScript（0-2-1） openstack（0-3-1） Linux（0-4-1）
             难度：全部（0-1-0）初级（0-1-1） 中级（0-1-2） 高级（0-1-3）

       因此，选择中的a标签的href，应根据当前访问的url生成。

    2.3解决---simple_tag
        比如，方向中的a标签，就可以根据当前url，替换掉第一个数字，而不用管其余的数字，
        使用simple_tag动态生成：
        #!/usr/bin/env python
            #coding:utf-8
            from django import template
            from django.utils.safestring import mark_safe

            register = template.Library()#不能变

            @register.simple_tag
            def action(current_page,item):
                #current_page:通过前端获取的当前访问的url,video-0-0-0.html
                #item:通过前端获取的方向表中的id和name
                url_list=current_page.split('-')#变成列表
                url_list[1]=str(item['id'])#替换掉第一个数字
                url_str='-'.join(url_list)#生成href动态字符串
                temp='''
                <a href="%s">%s</a>
                '''%(url_str,item['name'])#生成a标签
                return mark_safe(temp)

            这样，确实能生成，但是如果当前点击的就应该有active样式，因此改造一下：

                url_list=current_page.split('-')#变成列表
                if str(item['id'])=url_list[1]:#表示当前点击的，加入active样式
                    temp='<a href="%s" class="active">%s</a>'#生成a标签
                else:
                    temp='<a href="%s">%s</a>'
                url_list[1]=str(item['id']) #替换掉第一个数字
                url_str='-'.join(url_list)#生成href动态字符串
                temp=temp%(url_str,item['name'])#生成a标签
                return mark_safe(temp)

        前端使用该simple_tag生成动态href：
                {% load xx %}#必须在html的最顶部

                {%for item in direction_list %}
                {% action current_page item  %}//使用动态href
                {%endfor%}

        其余的分类和难度都可以使用类似的方法，根据当前url，替换掉第二和第三个数字，而不用管其它。
        分类的simple_tag只要把上面的url_list[1]换成url_list[2]，即可；

        难度稍有不同，因为是最后，当用split分割video-0-0-0.html时，
        其url_list[3]='0.html',
        因此应将上面的url_list[1]=str(item['id'])换成
            url_list[3]=str(item['id'])+'.html',
        将if str(item['id'])=url_list[1]换成
            if str(item['id'])=url_list[3].split('.')[0]

        处理全部选项，也就是当video-0-0-0.html时，全部要变成active：
        实例部分参见python全栈工程师 4
        0037-django官网项目之组合搜索功能实现5-VIP课程
        比如方向下的全部：

          将第一个数字换成'0',如果等于'0'，要加上active样式
        @register.simple_tag
        def action_all(current_page):
            url_list=current_page.split('-')#变成列表
            if url_list[1]='0':#表示当前点击的，加入active样式
                temp='<a href="%s" class="active">全部</a>'#生成a标签
            else:
                temp='<a href="%s">全部</a>'
            url_list[1]='0' #替换掉第一个数字
            url_str='-'.join(url_list)#生成href动态字符串
            temp=temp%(url_str)#生成a标签
            return mark_safe(temp)
        其余分类和难度的全部也是用类似的方法就可以了，
        分类只要把url_list[1]='0'换成url_list[2]='0'，
        难度只要把url_list[1]='0'换成url_list[3]='0.html'。


    2.4小结：
        其实url的构造还可以优化成：
        格式：videos-0-0-0-choice.html
        说明：videos-方向id-分类id-级别id（难度）-choice.html
        原因：这样可以更简单处理simple_tag，url经过split后，不会再出现第三个数字处理方式不同
             ，处理方式都统一。
             加入index参数，方向、分类、级别的处理方式统一：

            from django import template
            from django.utils.safestring import mark_safe
            register = template.Library()#不能变

            @register.simple_tag
            def action(current_page,item,index):
                #current_page:通过前端获取的当前访问的url,video-0-0-0.html
                #item:通过前端获取的方向表中的id和name
                #index:方向为1，分类为2，难度为3
                url_list=current_page.split('-')#变成列表
                if str(item['id'])=url_list[index]:#表示当前点击的，加入active样式
                    temp='<a href="%s" class="active">%s</a>'#生成a标签
                else:
                    temp='<a href="%s">%s</a>'
                url_list[index]=str(item['id']) #替换掉第一个数字
                url_str='-'.join(url_list)#生成href动态字符串
                temp=temp%(url_str,item['name'])#生成a标签
                return mark_safe(temp)

            @register.simple_tag
            def action_all(current_page,index):
                url_list=current_page.split('-')#变成列表
                if url_list[index]='0':#表示当前点击的，加入active样式
                    temp='<a href="%s" class="active">全部</a>'#生成a标签
                else:
                    temp='<a href="%s">全部</a>'
                url_list[index]='0' #替换掉第一个数字
                url_str='-'.join(url_list)#生成href动态字符串
                temp=temp%(url_str)#生成a标签
                return mark_safe(temp)

            前端使用该simple_tag生成动态href：
                {% load xx %}#必须在html的最顶部
                <p> 选择：</p>
                <hr/>
                <div>
                    <span>方向：</span>
                    {% action_all current_page  1 %}//使用'全部'的动态href的simple_tag
                    {%for item in direction_list %}
                    {% action current_page item 1 %}//使用动态href的simple_tag
                    {%endfor%}
                </div>
                <div>
                    <span>分类：</span>
                    {% action_all current_page  2 %}//使用'全部'的动态href的simple_tag
                    {%for item in classification_list %}
                    {% action current_page item 2 %}//使用动态href的simple_tag
                    {%endfor%}
                </div>
                <div>
                    <span>难度：</span>
                    {% action_all current_page  3 %}//使用'全部'的动态href的simple_tag
                    {%for item in level_list %}
                    {% action current_page item 3 %}//使用动态href的simple_tag
                    {%endfor%}
                </div>

3，存在的问题：
    网页内容如下：

        选择：

           方向：全部 运维自动化 运维 虚拟化 测试
           分类：全部 python JavaScript openstack Linux
           难度：全部 初级 中级 高级

      要求：
        a,默认都是全部：方向、分类、难度要全部列出来.
        b,方向是总起点，始终在页面呈现出来。
        c,分类要根据方向呈现，只显示该方向下的分类，当方向是全部时，列出所有分类。

    3.1 分类要根据方向呈现，只显示该方向下的分类，当方向是全部时，列出所有分类。
        views
        def video(request,**kwargs):
            direction_id=kwargs.get('direction_id',None)
            classification_id=kwargs.get('classification_id',None)
            level_id=kwargs.get('level_id',None)

            direction_list=models.方向表.object.all().values('id','name')

            if direction_id=='0':#方向是全部时,即方向id为0
                classification_list=models.分类表.object.all().values('id','name')
            else:#只显示该方向下的分类
                #先通过第三张关系表，取得该方向下的相应的分类id
                ret=models.方向-分类关系表（第三张表）.object.filter(方向id=direction_id).values('分类id')
                #再用id_in在分类表中进行筛选
                classification_list=models.分类表.object.filter(id_in=ret).values('id','name')
            同理可以处理分类与难度间的关系
            如果分类id=0，即分类是全部时，列出所有难度，
            否则，根据分类id，列出该分类下的难度。
            ...
            return render(request,'video.html',{
                'direction_list':direction_list,
                'classification_list':classification_list,
                'level_list':level_list,
                ...
            })
    3.2 网址bug
        比如，当前网址为0-4-1，我方向选择了4，变为4-4-1，
        如果方向4下有分类4，没有问题；
        如果方向4下没有分类4时，怎么办？
        解决：当分类id不在该方向的分类id范围时，将该分类id置为0，即跳到全部

        #先通过第三张关系表，取得该方向下的相应的分类id
        ret=models.方向-分类关系表（第三张表）.object.filter(方向id=direction_id).values('分类id')
        if classification_id in ret:#如果方向4下有分类4，没有问题；
            pass
        else：#当分类id不在该方向的分类id范围时，将该分类id置为0，即跳到全部
            classification_id='0'