自定义分页：
分页功能在每个网站都是必要的，对于分页来说，其实就是根据用户的输入--计算出应该在数据库表中的起始位置。
一、分析：
    1、设定每页显示数据条数

    2、用户点击页码（第一页、第二页...）

    3、设定显示多少页码

    4、获取当前数据总条数

    5、根据设定显示多少页码和数据总条数计算出，总页数

    6、根据设定的每页显示条数和当前页码，计算出需要取数据表的起始位置

    7、在数据表中根据起始位置取值，页面上输出数据

    8、输出分页html，如：［上一页］［1］［2］［3］［4］［5］［下一页］

二、实例

1，源码
    class Handle_classes(View):
        def get(self,request):
            username = request.session.get("username", None)
    #分页，每页10条数据
            # clist=models.Classes.objects.all().order_by('-id')[0:10]
            #1页 0,10
            #2页 10,20
            #3页 20,30
    #推理出页码和切片的关系：start=(当前页码-1)*10 end=当前页码*10
            # 定义当前页码,从前端获取p即当前页码，默认为1
            current_page=request.GET.get('p',1)
            current_page=int(current_page)
            start=(current_page-1)*10
            end=current_page*10
            clist=models.Classes.objects.all().order_by('-id')[start:end]
            #按id倒序order_by('-id')
            #[0:5]切片（1到5条）
            #生成前端页码
            # page='''
            # <a href='http://127.0.0.1:8000/classes/?p=1'>1</a>
            # <a href='http://127.0.0.1:8000/classes/?p=2'>2</a>
            # <a href='http://127.0.0.1:8000/classes/?p=3'>3</a>
            # '''
    # 取得总页码
            v=models.Classes.objects.all().count()
            tote_page,a=divmod(v,10)#ps：tote_page,a=divmod(98,10)#就是99/10，tote_page为9是商，a为8是余数。
            if a!=0:
                tote_page+=1
    #生成动态页码
            #生成动态页码
            page_list=[]
            if current_page<=1:
                page_list.append("<a class='a-page' href='#'>上一页</a>")
                #'#'和JavaScript:void(0);表示什么都不做;但是JavaScript:void(0);看不到网页变化（连个#都没有）,更牛逼
                #href='JavaScript:void(0);'在下一页标签使用了：
                #page_list.append("<a class='a-page' href='JavaScript:void(0);'>下一页</a>")
            else:
                page_list.append("<a class='a-page' href='http://127.0.0.1:8000/classes/?p=%s'>上一页</a>"%(current_page-1))
            # for i in range(1,v+1):#页码太多
        #每页显示11个页码，当前页在中间
            start_page=current_page-5
            end_page=current_page+5+1
        #解决两头的问题：一大波if
            if tote_page<=11:
                start_page=1
                end_page=tote_page+1
            else:
                if current_page<=6:#解决当前页为5、4、3、2、1的问题，因为页码会出现0、-1、-2、-3...
                    start_page = 1
                    end_page = 12
                else:
                    if current_page+5>= tote_page:#解决当前页加5大于总页数的问题
                        start_page = tote_page+1-11
                        end_page = tote_page+1

            for i in range(start_page,end_page):
                if i==current_page:
                    temp = "<a class='a-page active' href='http://127.0.0.1:8000/classes/?p=%s'>[%s]</a>" % (i, i)
                else:
                    temp="<a class='a-page' href='http://127.0.0.1:8000/classes/?p=%s'>[%s]</a>"%(i,i)
                page_list.append(temp)
            if current_page>=tote_page:
                page_list.append("<a class='a-page' href='JavaScript:void(0);'>下一页</a>")
            else:
                page_list.append("<a class='a-page' href='http://127.0.0.1:8000/classes/?p=%s'>下一页</a>"%(current_page+1))

    #最终得到page字符串传到前端
            page=''.join(page_list)#生成动态页码字符串
            return render(request,
                          'classes.html',
                          {'username': username, 'clist': clist, 'start': start, 'page': page})

2，源码需注意的问题
    解决两头的问题：一大波if
        1，对于上一页和下一页
                if current_page<=1:
                    page_list.append("<a class='a-page' href='#'>上一页</a>")

                if current_page>=v:
                    page_list.append("<a class='a-page' href='#'>下一页</a>")

        2，对于总页数小于11
                if tote_page<11:
                    start_page=1
                    end_page=v

    3，对于当前页<6:
                if current_page<=6:
                    start_page = 1
                    end_page = 12

    4，对于当前页>最后一页
                if current_page>=v:
                    end_page = v


    5，对于当前页+5>=总页数

                if current_page+5>= v:
                        start_page = v-11
                        end_page = v
    6，以上汇总
            if v<=11:
                start_page=1
                end_page=v+1
            else:
                if current_page<=6:
                    start_page = 1
                    end_page = 12
                else:
                    if current_page+5>= v:
                        start_page = v-11
                        end_page = v

三、封装分页类
我们知道每个分页都像上面实例中那样写的话，代码很长、很乱。
因此，把分页功能进行封装，每个需要分页的地方取出来用就可以了。
