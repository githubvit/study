mysql练习题 使用Navicat 在本机MySQL数据库 wpq1 中操作
F:\BaiduNetdiskDownload\python学习资料\
2017年老男孩最新全栈python第2期视频教程 全套完整版\day36-python 全栈开发-基础篇-MySQL-Navicat 36-05
1，班级表class
CREATE TABLE `class` (
  `cid` int(11) NOT NULL AUTO_INCREMENT,
  `caption` varchar(32) NOT NULL,
  PRIMARY KEY (`cid`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

2，课程表course
CREATE TABLE `course` (
  `cid` int(11) NOT NULL AUTO_INCREMENT,
  `cname` varchar(32) NOT NULL,
  `teacher_id` int(11) NOT NULL,
  PRIMARY KEY (`cid`),
  KEY `fk_course_teacher` (`teacher_id`),
  CONSTRAINT `fk_course_teacher` FOREIGN KEY (`teacher_id`) REFERENCES `teacher` (`tid`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

3，学生表student
CREATE TABLE `student` (
  `sid` int(11) NOT NULL AUTO_INCREMENT,
  `gender` char(1) NOT NULL,
  `class_id` int(11) NOT NULL,
  `sname` varchar(32) NOT NULL,
  PRIMARY KEY (`sid`),
  KEY `fk_class` (`class_id`),
  CONSTRAINT `fk_class` FOREIGN KEY (`class_id`) REFERENCES `class` (`cid`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;

4，老师表teacher
CREATE TABLE `teacher` (
  `tid` int(11) NOT NULL AUTO_INCREMENT,
  `tname` varchar(32) NOT NULL,
  PRIMARY KEY (`tid`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

5，成绩表
CREATE TABLE `score` (
  `sid` int(11) NOT NULL AUTO_INCREMENT,
  `student_id` int(11) NOT NULL,
  `course_id` int(11) NOT NULL,
  `num` int(11) NOT NULL,
  PRIMARY KEY (`sid`),
  KEY `fk_score_student` (`student_id`),
  KEY `fk_score_course` (`course_id`),
  CONSTRAINT `fk_score_course` FOREIGN KEY (`course_id`) REFERENCES `course` (`cid`),
  CONSTRAINT `fk_score_student` FOREIGN KEY (`student_id`) REFERENCES `student` (`sid`)
) ENGINE=InnoDB AUTO_INCREMENT=53 DEFAULT CHARSET=utf8;


======================================练习题=====================
3、查询平均成绩大于60分的同学的学号、名字和平均成绩；
    方式一，先连表再分组筛选 不推荐，因为这样结果集很大，特别如果连表更大。
    SELECT
    	student.sid,
    	student.sname,
    	avg(score.num)as '平均值'     # avg聚合函数 别名as
    FROM
    	student
    LEFT JOIN score ON student.sid = score.student_id #连表
    GROUP BY student.sid HAVING avg(score.num)>60;#分组和筛选

    方式二，先分组筛选，建立了临时表T,然后用临时列表T和student表连表。
    SELECT
    	T.student_id as '学号',student.sname as '姓名',T.`平均值`
    FROM
    	(
    		SELECT
    			score.student_id,
    			avg(score.num) AS '平均值'
    		FROM
    			score
    		GROUP BY
    			score.student_id
    		HAVING
    			AVG(score.num) > 60
    	) AS T
    LEFT JOIN student ON student.sid = T.student_id;

5、查询姓“李”的老师的个数
    SELECT count(teacher.tid)as '个数' from teacher WHERE teacher.tname LIKE'李%';

6、查询没学过“李平”老师课的同学的学号、姓名；in和not in
    SELECT
    *
    FROM
    student
    where
    student.sid
    not in      #第四步，通过学生表的学生ID 排除这些学生，剩下的就是没学过“李平”老师课的同学
    (SELECT DISTINCT #ps，DISTINCT是去除重复
    	score.student_id#第三步，看看哪些学生学了这些课程id的课程，找到学生id
    FROM
    	score
    WHERE
    	score.course_id IN (
    		SELECT
    			course.cid#第二步，通过李平的tid，看看他教了哪些课，找到课程id
    		FROM
    			course
    		WHERE
    			teacher_id IN (
    				SELECT
    					teacher.tid #这是第一步，先找到李平的老师id--tid
    				FROM
    					teacher
    				WHERE
    					teacher.tname LIKE '李平%'
    			)
    	)
    )


7、查询学过“1”并且也学过编号“2”课程的同学的学号、姓名；

   a，从成绩表出发，先筛选出学过1或2的结果v，
   b，再通过按学号分组，统计课程数，筛选出课程数大于1（就剔除了只学过1或2）的结果b，
   c，再连学生表，取出姓名--推荐
    SELECT
    b.student_id,student.sname
    FROM
        (SELECT
        V.student_id,V.course_id,count(V.course_id)
        FROM
            (SELECT
            student_id,course_id
            from
            score
            where course_id=1 or course_id=2)as V #注意这里用or 不能用and，用and为null。
        GROUP BY V.student_id
        HAVING count(V.course_id)>1)as b
    LEFT JOIN student on student.sid=b.student_id;

9、10、查询有课程成绩小于60分的同学的学号、姓名；上面使用GROUP BY去重，这里使用DISTINCT去重
    SELECT DISTINCT
    	score.student_id,
    	student.sname
    FROM
    	score
    RIGHT JOIN student ON score.student_id = student.sid
    WHERE
    	score.num < 60;


11、查询没有学全所有课的同学的学号、姓名；
    SELECT
    	score.student_id,
    	student.sname
    FROM
    	score
    LEFT JOIN student ON score.student_id = student.sid
    GROUP BY
    	score.student_id
    HAVING
    	count(score.course_id) < (          #重点在这<(取得的所有课程统计值)
    		SELECT
    			count(course.cid)
    		FROM
    			course
    	);

12、查询至少有一门课与学号为“1”的同学所学相同的同学的学号和姓名；
    SELECT DISTINCT
        score.student_id,
        student.sname
    FROM
        score
    LEFT JOIN student ON score.student_id = student.sid
    WHERE
        score.student_id!=1 #排除001
    and
        score.course_id IN (         #重点在这IN(取得001号的所有课程)
            SELECT
                score.course_id
            FROM
                score
            WHERE
                score.student_id = '1'
        )

13、查询>=学号为“001”同学所选课程的其他同学学号和姓名；
    利用上面的结果集，命名该结果集为v，
    对上面的结果集进行count，注意这里就不能用DISTINCT去重，否则count为null，用GROUP BY score.student_id去重，
    如果count等于001的count，那么这些人就是大于等于001的结果集。
    SELECT
    v.student_id,v.sname,v.count
    FROM
    ##############################################
    (SELECT
    	score.student_id,
    	student.sname,
    	count(score.student_id)as count#对统计的结果取个别名count
    FROM
    	score
    LEFT JOIN student ON score.student_id = student.sid
    WHERE
    	score.student_id!=1
    and
    	score.course_id IN (
    		SELECT
    			score.course_id
    		FROM
    			score
    		WHERE
    			score.student_id = '1'
    	)
    GROUP BY score.student_id)as v
    #############################################
    where
    v.count=(SELECT
    			count(score.course_id)
    		FROM
    			score
    		WHERE
    			score.student_id = '1')


    方案二，不用临时列表v，直接用having对聚合进行比较筛选
    SELECT
    	score.student_id,
    	student.sname
    FROM
    	score
    LEFT JOIN student ON score.student_id = student.sid
    WHERE
    	score.student_id!=1
    and
    	score.course_id IN (
    		SELECT
    			score.course_id
    		FROM
    			score
    		WHERE
    			score.student_id = '1'
    	)
    GROUP BY score.student_id
    HAVING
    count(score.student_id)=(SELECT
    			count(score.course_id)
    		FROM
    			score
    		WHERE
    			score.student_id = '1')

14、查询和“001”号的同学学习的课程完全相同的其他同学学号和姓名
    上面的结果集是大于等于001号的集合，
    如果另外建一个集合，就是和001号课程数量相等的集合。
        select score.student_id from score GROUP BY score.student_id
        having count(score.course_id)=(
        SELECT
            count(score.course_id)
        FROM
            score
        WHERE
            score.student_id = '1')
    那么两个集合的交集就是课程完全相同的其他同学学号和姓名，那么就在上面的条件中用and把交集加入既可。
    SELECT
        score.student_id,
        student.sname,
        count(score.student_id) AS count
    FROM
        score
    LEFT JOIN student ON score.student_id = student.sid
    WHERE
        score.student_id != 1
    AND score.course_id IN (
        SELECT
            score.course_id
        FROM
            score
        WHERE
            score.student_id = 1
    )
    AND score.student_id IN (#这个and就是加入的个数和1相等的集合
        SELECT
            score.student_id
        FROM
            score
        GROUP BY
            score.student_id
        HAVING
            count(score.course_id) = (
                SELECT
                    count(score.course_id)
                FROM
                    score
                WHERE
                    score.student_id = 1
            )
    )
    GROUP BY
        score.student_id
    HAVING
        count = (
            SELECT
                count(score.course_id)
            FROM
                score
            WHERE
                score.student_id = 1
	);

16、向SC表中插入一些记录，这些记录要求符合以下条件：①没有上过编号“002”课程的同学学号；②插入“002”号课程的平均成绩；
    a，先找到没有上过编号“002”课程的同学学号方法在第6题，
        select score.student_id from score where score.student_id not in
        (select score.student_id from score where score.course_id=2 )group by score.student_id;
    b，查到“002”号课程的平均成绩
        select avg(score.num) from score where score.course_id=2；
    向SC表中插入
        insert into score(student_id,course_id,num)values(a,2,b)
    这样就可以了，但是我们把a和b取代上面的语句时报错，不管你的a和b是不是加括号。

    好了，values不支持这种方式，insertinto支持插入结果集：
        insert into tb_name (field1,field2,...) select a,b,c,...from tb2 ...
        select a,b,c,...from tb2 ...就是结果集，
    结果集可以从这里获取:
        select score.student_id as a,2 as b,(select avg(score.num) from score where score.course_id=2)as c from score where score.student_id not in
        (select score.student_id from score where score.course_id=2 )group by score.student_id;
        a	b	c
        2	2	65.0909
        13	2	65.0909

    INSERT INTO score (student_id, course_id, num)
        select score.student_id as a,2 as b,(select avg(score.num)as c  from score where score.student_id not in
        (select score.student_id from score where score.course_id=2 )group by score.student_id;
    受影响的行: 2
    时间: 0.038s
    成功插入结果集

17、按平均成绩从低到高 显示所有学生语文,数学,英语三门课的课程成绩，按如下形式显示： 学生ID,语文,数学,英语,有效课程数,有效平均分；
    利用子查询和父查询关系inner_tb.student_id=outer_tb.student_id，动态获取课程成绩，
    默认子查询只能是1列数据，
    尤其是当内外表都是同一张表的时候，要取别名，用以区分，这点横重要。比如，inner_tb和outer_tb

    SELECT
    outer_tb.student_id ,
    (select num from score as inner_tb where inner_tb.student_id=outer_tb.student_id and inner_tb.course_id=1 )as '语文',
    (select num from score as inner_tb where inner_tb.student_id=outer_tb.student_id and inner_tb.course_id=2 )as '数学',
    (select num from score as inner_tb where inner_tb.student_id=outer_tb.student_id and inner_tb.course_id=3 )as '英语',
    (select num from score as inner_tb where inner_tb.student_id=outer_tb.student_id and inner_tb.course_id=4 )as '物理',
    (select num from score as inner_tb where inner_tb.student_id=outer_tb.student_id and inner_tb.course_id=5 )as '体育',
    count(outer_tb.course_id)as '有效课程数',
    avg(outer_tb.num) as '平均成绩'
    FROM score as outer_tb
    GROUP BY outer_tb.student_id order by avg(outer_tb.num);

    student_id      语文     数学    英语     物理      体育      有效课程数       平均成绩
        1	        10	    9	    	    66		                3	     28.3333
        2	        8	    65	    68	    99		                4	     60.0000
        4	        79	    11	    67	    100		                4	     64.2500
        5	        79	    11	    67	    100		                4	     64.2500
        7	        9	    100	    67	    88		                4	     66.0000
        8	        9	    100	    67	    88		                4	     66.0000

18、查询各科成绩最高和最低的分：以如下形式显示：课程ID，最高分，最低分；
    按课程分组GROUP BY course_id，每门课都有最高max(num)和最低分min(num) 。
    SELECT course_id,max(num),min(num) from score GROUP BY course_id;
    course_id  max(num)   min(num)
        1	    91	        8
        2	    100	        9
        3	    87	        43
        4	    100	        22

19、按各科平均成绩从低到高和及格率的百分数从高到低顺序；
    思路：case when 条件 then结果1else结果2end
    这是三元运算，当。。。时候结果1否则结果2.

    sum(CASE WHEN num>60 THEN 1 ELSE 0 END)
    当num成绩大于60的时候让结果为1否则结果为0，
    对结果求和，就求出了及格的个数，除以count(student_id)总个数，就得到了及格率。

    SELECT avg(num)as '平均分',sum(CASE WHEN num>60 THEN 1 ELSE 0 END)/count(student_id)as percent from score
    GROUP BY score.course_id ORDER BY avg(num) asc, percent desc; 后面的percent desc实际上没有用，被前面给钳制了。

        平均分       percent
        53.4167	    0.5833
        64.4167	    0.7500
        65.0769	    0.7692
        85.2500	    0.9167

21、查询各科成绩前三名的记录:(不考虑成绩并列情况)
    比如我们拿单科成绩排名表
    select inner_sc.student_id ,inner_sc.num
    from score as inner_sc
    WHERE inner_sc.course_id=1 #单科
    GROUP BY inner_sc.student_id
    ORDER BY num DESC 按从大到小排序desc
    LIMIT 0,1 取一条排名第一的数据，就是偏移量为0的1条数据
    LIMIT 1,1 取一条排名第二的数据，就是偏移量为1的1条数据
    LIMIT 2,1 取一条排名第三的数据，就是偏移量为2的1条数据

    方案一：用父子查询关联课程id 成绩唯一
    SELECT out_sc.course_id,
    (select inner_sc.student_id  from score as inner_sc
    WHERE inner_sc.course_id=out_sc.course_id  父子查询关联课程id
    GROUP BY inner_sc.student_id
    ORDER BY num DESC
    LIMIT 0,1 )AS'first',  取一条排名第一的数据，

    (select inner_sc.student_id  from score as inner_sc
    WHERE inner_sc.course_id=out_sc.course_id
    GROUP BY inner_sc.student_id
    ORDER BY num DESC
    LIMIT 1,1 )AS'second',  取一条排名第二的数据

    (select inner_sc.student_id  from score as inner_sc
    WHERE inner_sc.course_id=out_sc.course_id
    GROUP BY inner_sc.student_id
    ORDER BY num DESC
    LIMIT 2,1 )AS'third'    取一条排名第三的数据

    from score as out_sc GROUP BY out_sc.course_id;

        course_id     first   second   third
            1	        9	    10	    11
            2	        6	    7	    8
            3	        3	    3	    2
            4	        4	    5	    6

    方案二：用父子查询关联课程id， 成绩不唯一，不考虑成绩并列情况
    找到第一名的成绩（LIMIT 0,1）、第四名的成绩（LIMIT 3,1），
    采用夹逼法，只要成绩在第一和第四之间就上榜，这样取的是前四名。

    SELECT
    *   #这个*取到的就是T的所有列
    FROM(
    SELECT
    out_sc.sid,out_sc.student_id,out_sc.course_id,out_sc.num,
    (select inner_sc.num from score as inner_sc WHERE inner_sc.course_id=out_sc.course_id GROUP BY inner_sc.student_id ORDER BY num DESC LIMIT 0,1 )AS'first_num',
    (select inner_sc.num from score as inner_sc WHERE inner_sc.course_id=out_sc.course_id GROUP BY inner_sc.student_id ORDER BY num DESC LIMIT 3,1 )AS'fourth_num'
    from score as out_sc)as T #必须用一个临时列表包起来，才能取到first_num和fourth_num。
    where num<=T.first_num and num>=T.fourth_num
    ORDER BY T.course_id,num DESC;#course_id升序排列1234，num 成绩按从大到小排序desc。

    sid  student_id  course_id num  first_num   fourth_num
    34	    9	        1	    91	    91	        90
    42	    11	        1	    90	    91	        90
    38	    10	        1	    90	    91	        90
    46	    12	        1	    90	    91	        90
    23	    6	        2	    100	    100	        88
    31	    8	        2	    100	    100	        88
    27	    7	        2	    100	    100	        88
    35	    9	        2	    88	    100	        88
    52	    13	        3	    87	    87	        67
    12	    3	        3	    87	    87	        67
    8	    2	        3	    68	    87	        67
    28	    7	        3	    67	    87	        67
    16	    4	        3	    67	    87	        67
    36	    9	        3	    67	    87	        67
    24	    6	        3	    67	    87	        67
    32	    8	        3	    67	    87	        67
    20	    5	        3	    67	    87	        67
    17	    4	        4	    100	    100	        99
    25	    6	        4	    100	    100	        99
    21	    5	        4	    100	    100	        99
    9	    2	        4	    99	    100	        99
    13	    3	        4	    99	    100	        99


24、查询男生、女生的人数；
    SELECT gender,count(sid)from student GROUP BY gender
        gender  count(sid
          男	        10
          女	        6
    要求行变列，可以用mysql中两表连接的笛卡尔积（穷尽一切可能组合）
    SELECT (select count(sid)from student WHERE gender='男')as '男',
	(select count(sid)from student WHERE gender='女')as '女'        #注意后面没有from table....
	        男   女
	        10	 6

    SELECT
    *   #这里的*代指两表中的所有列。
    from
    (select count(sid)as '男' from student WHERE gender='男')as nan,
	(select count(sid)as '女' from student WHERE gender='女')as nv
    结果同上，这里使用了两个临时表nan和nv，注意临时表一定要有别名。