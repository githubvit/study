#_*_coding:utf-8_*_
'''
我们知道进程之间是独立的，队列和管道实现了进程之间数据的传递。
那么进程之间就真的没办法像线程一样共享一份数据？
比如两个或多个进程共同去改一份数据。
这事可以的，用manager实现
像 list, dict, Namespace（变量名）, Lock, RLock, Semaphore（信号量）, 
BoundedSemaphore, Condition, Event, Barrier, Queue, Value and Array. For example,
等都可以用manage实现进程间数据共享。
'''

from multiprocessing import Process, Manager
import os

def f(d, l):
    # 每个进程都对字典进行了操作
    d[1] = '1'#操作字典1:'1',完全相同的操作只会操作一次，即一个线程加了，其余的就不会了
    d['2'] = 2#'2':2
    d["pid%s" %os.getpid()] = os.getpid()#每个进程都会增加自己的进程pid
    l.append(1)#每个都会加1，因为列表是有下标的
    print l,d


if __name__ == '__main__':
    # with Manager() as manager:#用这个就是下面的意思，单是和with open一样，要缩进。
    manager=Manager()
    d = manager.dict()#用专门的语法生成的可在多个进程中进行传递和共享的字典

    l = manager.list(range(5))#生成一个列表，可在多个进程间共享和传递

    p_list = []
    for i in range(10):
        p = Process(target=f, args=(d, l))
        #在每个进程中传递了刚生成的用于多进程的字典和列表

        p.start()
        p_list.append(p)
    for res in p_list:#等待结果，保证每个进程都改完数据
        res.join()

    l.append("from parent")
    print(d)
    print(l)
'''
结果：说明实现了进程间的数据共享
[0, 1, 2, 3, 4, 1] {1: '1', '2': 2, 'pid36184': 36184}
[0, 1, 2, 3, 4, 1, 1] {1: '1', '2': 2, 'pid36076': 36076, 'pid36184': 36184}
[0, 1, 2, 3, 4, 1, 1, 1] {1: '1', '2': 2, 'pid37288': 37288, 'pid36076': 36076, 'pid36184': 36184}
[0, 1, 2, 3, 4, 1, 1, 1, 1] {1: '1', 'pid37288': 37288, 'pid37348': 37348, 'pid36184': 36184, '2': 2, 'pid36076': 36076}
[0, 1, 2, 3, 4, 1, 1, 1, 1, 1] {1: '1', 'pid1664': 1664, 'pid37288': 37288, 'pid37348': 37348, 'pid36184': 36184, '2': 2, 'pid36076': 36076}
[0, 1, 2, 3, 4, 1, 1, 1, 1, 1, 1] {1: '1', 'pid1664': 1664, 'pid37288': 37288, 'pid37348': 37348, 'pid36184': 36184, '2': 2, 'pid37528': 37528, 'pid36076': 36076}
[0, 1, 2, 3, 4, 1, 1, 1, 1, 1, 1, 1] {1: '1', 'pid1664': 1664, 'pid37288': 37288, 'pid37348': 37348, 'pid36184': 36184, '2': 2, 'pid37332': 37332, 'pid37528': 37528, 'pid36076': 36076}
[0, 1, 2, 3, 4, 1, 1, 1, 1, 1, 1, 1, 1] {1: '1', 'pid1664': 1664, 'pid37288': 37288, 'pid35632': 35632, 'pid37348': 37348, 'pid36184': 36184, '2': 2, 'pid37332': 37332, 'pid37528': 37528, 'pid36076': 36076}
[0, 1, 2, 3, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1] {1: '1', 'pid1664': 1664, 'pid31092': 31092, 'pid37288': 37288, 'pid35632': 35632, 'pid37348': 37348, 'pid36184': 36184, '2': 2, 'pid37332': 37332, 'pid37528': 37528, 'pid36076': 36076}
[0, 1, 2, 3, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] {1: '1', 'pid1664': 1664, 'pid31092': 31092, 'pid37288': 37288, 'pid35632': 35632, 'pid37348': 37348, 'pid36184': 36184, '2': 2, 'pid37332': 37332, 'pid37236': 37236, 'pid37528': 37528, 'pid36076': 36076}
{1: '1', 'pid1664': 1664, 'pid31092': 31092, 'pid37288': 37288, 'pid35632': 35632, 'pid37348': 37348, 'pid36184': 36184, '2': 2, 'pid37332': 37332, 'pid37236': 37236, 'pid37528': 37528, 'pid36076': 36076}
[0, 1, 2, 3, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 'from parent']
'''
import greenlet