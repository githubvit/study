登陆和验证模块
1，客户端用户登陆
2，服务端验证
附件
用户的数据文档：用json的文档格式，放在db的目录下，数据序列化

步骤：
1，客户端登陆：输入用户名和密码，获取登陆结果
    发送给服务端
2，服务端验证：对客户端发来的用户名和密码的MD5值进行验证
    2.1 在db下找到用户id的json文档
    2.2 比对该id下json文档中的password字段的md5与客户端发过来的密码（md5）

附加要求：
1，实现多用户登陆
    1.1 使用socketserver实现多用户登陆
2，每个用户只允许单个在线
    2.1 先在内存中建立临时用户字典列表，{‘user_id’:[]}，成功登陆后就append进去用户id，退出登陆就remove该用户id。
    2.2 用户登陆时，先去内存中看状态，没有在列表中则进行登陆，有则不允许登录，从而保证1个id只有1个用户在线。
3，每个客户端（ip，port）输入错3次，就被终止。



作者:Bill
版本:示例版本 v0.1
==============================
程序介绍:
    实现登陆验证
    功能全部用python的基础知识实现,用到了time\os\sys\json\open\logging\函数\模块知识\面向对象\socket等,
    主要帮给大家一个简单的网络编程的示例



程序结构:
training_用户登陆——加密认证
│
├── Readme #说明 程序结构
│
├── server_auth #服务端加密验证
│   │
│   ├──bin #执行文件 目录，
│   │   ├── __init__.py
│   │   ├── path_finding.py  #路径寻找
│   │   └── server_auth.py #本意是启动，未成功，只能在主程序server_authenticate.py启动
│   │                       #后来启动成功，是因为在主程序中定义了def run（），在启动程序中调用了run（）
│   │ 
│   ├──conf #配置文件
│   │   ├── __init__.py
│   │   └── settings.py #主配置文件：字典类型格式定义的数据路径、日志相关资料
│   │ 
│   ├──loging_authenticate #主要程序逻辑都 在这个目录 里
│   │   ├── __init__.py
│   │   ├── auth.py        #用户认证模块
│   │   ├── key_ch.py      #秘钥比对模块
│   │   └── server_authenticate.py   #服务端主程序，服务端启动程序
│   │    
│   ├──db  #用户数据存储的地方
│   │   ├── __init__.py
│   │   ├── authenticate_user_data.py #生成初始的用户认证数据,把这个数据存成一个以这个用户id为文件名的json文件,放在accounts目录就行了,
│   │   │                              秘钥是以md5加密后的十六进制格式的asc码，程序自己去会这里找
│   │   └── accounts #存各个用户认证的数据 ,一个用户一个文件
│   │       └── 1234.json、abc_test.json、test.json#多个用户账户示例文件
│   │ 
│   ├──log #日志程序目录
│   │   ├── __init__.py
│   │   │
│   │   ├── access.log#修改了日志主程序，把日志记录放在这里感觉更合适
│   │   │
│   │   └── server_logger.py   #日志主程序
│   │
│   └──access.log#日志记录
│
│
└── client_loging #用户登陆客户端
    └──client_loging.py #用户登陆客户端主程序
