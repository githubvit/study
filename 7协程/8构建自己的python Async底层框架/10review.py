
多任务 单线程 异步 并发 的 总结：

多任务：普通函数、生成器、协程、socket

普通函数 多任务 单线程 异步 并发：

    1. down-up数数案例：多任务 单线程 异步 并发
        1.1 第一步：实现 多任务交替
            1.1.1 切函数 —— 把函数 切成 一段一段的 小函数。
                用 递归 + [ lambda：每步函数 ] 的方法得到每步函数体，实现把函数切片。

            1.1.2 装小函数:用 双向队列deque 来装  切出来的小函数体。
                因为，双向队列deque 可以 右放入append，左取出popleft。保持流向。

            1.1.3 取小函数+执行+生成下一步小函数+装小函数 + 取小函数+...+装小函数 + 取... 
                这种循环实现了 多任务的 交替 执行。

            1.1.4 定义 调度类 class Scheduler。
                内有双向队列self.ready、把函数装入队列的方法call_soon、从队列取出函数执行的方法run。     

        1.2 第二步：实现 多任务并发
            1.2.1 先实现 小函数在队列里排序
                完善调度类，定义延时队列self.sleeping,用来装 不是立即执行的小函数，
                定义延时调用方法sleep()，用 堆排序heapq 实现把延时执行的小函数 有序 放入延时队列。

            1.2.2 再按照 < 等则同 否则帮 > 的算法实现并行
                完善调度类，在run方法中，对于延时队列的小函数，实现 休息时间相同，就同一休息；
                休息时间不同，就少帮多休息，简言之 等则同 否则帮 。 

    2. produce-consumer 生产-消费案例：多任务 并发 之间 的 消息传递
        2.1 定义 异步队列类 class AsyncQueue。实现存消息、放消息、取消息。
            用双向队列deque 实现了 消息队列、实现了 放消息put、取消息get。

        2.2 难点在于 处理来早了的get，即get时 队列里 没有消息，    
