一 网络编程
	目标：编写一个C/S或B/S架构的基于网络通信的软件
			
	1、C/S,B/S（*****）
		server<===============>client
		服务端特点：
			1、不间断地提供服务
			2、服务端要支持并发+高性能

	2、互联网
		互联网=物理连接介质+互联网协议（OSI七层***）
		
		tcp三次握手，四次挥手 （*****）
		tcp可靠，但不如udp效率高 （*****）
		udp不可靠，但效率高 （*****）
	
	3、socket（*****）
		socket抽象层位于传输层与应用层之间
	
	4、基于tcp协议的套接字通信（*****）
		加上连接循环
		加上通信循环
	
	5、粘包问题：（*****）
		tcp流式协议独有的粘包问题
			解决方法：自定义报头
	
		udp数据报协议没有粘包问题
			
	6、远程执行命令的小程序/上传下载文件的程序（*****）
	
	7、基于udp协议的套接字通信（***）
	
	
二 并发编程
	目标：让服务端能够支持高并发+高性能

	1、	操作系统发展史
		多道技术（*****）
			产生背景
			多道技术的核心：
				1、空间上的复用
				2、时间上的复用
				
		*****
		并发：看起来同时运行
		并行：真正意义上的同时运行，一个cpu同一时刻只能做一件事
			只有多核才能同时做多件事，即并行的效果
			
		
	2、进程
		1、进程理论（*****）
		2、开启进程的两种方式（*****）
		3、守护进程（**）
		4、互斥锁与信号量（**）
		5、IPC机制：队列，管道（*）
		6、进程queue=管道+锁 （***）
		7、生产者消费者模型（*****）
		
	3、线程
		1、线程理论（*****）
		2、开启线程的两种方式（*****）
		3、守护线程（**）
		4、互斥锁与信号量（**）
		5、GIL vs 互斥锁（*****）
		6、Cpython的解释器下（*****）
			多个任务是IO密集型：多线程
			多个任务是计算密集型：多进程
		7、死锁现象与递归锁（**）
		8、线程queue（***）
		9、Event事件（**）
	
	4、池（*****）
		为何要用池：
			操作系统无法无限开启进程或线程
			池作用是将进程或线程控制操作系统可承受的范围内
		什么时候用池：
			当并发的任务数要远超过操作系统所能承受的进程数或
			线程数的情况应该使用池对进程数或线程数加以限制
		
		如何用池？
			池内装的东西有两种：
				装进程：进程池
				装线程：线程池
				
			进程线程池的使用
	
		
		提交的两种方式：
			同步调用
			异步调用+回调机制
			
		任务执行的三种状态：
			阻塞
				阻塞
			非阻塞：
				就绪
				运行
			
		
	
	5、单线程下实现并发（****）
		协程：在应用程序级别实现多个任务之间切换+保存状态
		
		高性能：
			单纯地切换，或者说么有遇到io操作也切换，反而会降低效率
			检测单线程下的IO行为，实现遇到IO立即切换到其他任务执行
			
		gevent
			
	6、IO模型（主要掌握理论****）
		阻塞IO
		非阻塞IO
		IO多路复用
		异步IO
	
	
	
	
	