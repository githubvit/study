r_1注册界面：
            
    动画及动画组的设计：
    
        1 在设计师designer界面，把动画对象的动画结束的位置在ui中先摆好。***
    
        2 在view中，动画对象采用列表模式定义，以及每个对象的位置pos也采用列表模式定义，做到一一对应。
            这就记住了每个对象动画结束的位置。

        3 在view中，动画对象的结束位置被记住后，用收拢函数收拢各个动画对象到初始位置即菜单按钮的位置。


l_1登录界面：
    动图的设置：
        给label标签添加动图：
            a.  在designer界面，无法给标签添加动图。
                
                但是要在qrc资源管理文件上添加动图资源。
                
                这样，将来就可以在view文件中调用该动图资源添加动图。


            b.  要给标签设定最大高度，因为在view中设置动图时，当设置动图和标签自动匹配：
                
                # 设定动图大小自动适应标签
                
                self.an_lb.setScaledContents(True)
                
                如果标签不固定，则标签会按照动图的尺寸去适应，这里由于动图尺寸的高度高，就把标签给拉高，会超过布局，弄乱其他布局结构。
                
                因此，设置标签的最大高度，就可以避免。

c_1计算界面:
    实现了充分的解耦：
        样式是由自定义控件通过样式文件定义的，换个样式文件，就换了个样式。

        功能是由虚拟控件实现的，换个虚拟控件，就实现了不同的功能，
        或者给虚拟控件多写几个功能，就实现了功能的升级等。

        而ui文件就是通过控件的摆放和布局，实现了软件外在的一个框架(框架基本是不动的)。

    控件
        使用自定义类 ( 所有按键使用自定义类 实现自定义信号的发射和动态样式的加载)

            1 新建文件ca_btn.py，放在系统文件夹下，便于引入

                自定义按键类CaBtn:
                
                    1 完成自定义信号和发射 传递参数
                        让按键按下时发射自定义的信号，并传递在设计师designer的ui中定义的：该按键的动态属性role及其值

                    2 实现样式
                        完成样式文件的引入和加载及动态样式的定义和加载

            2 控件的提升：
                
                1 右击所有按键
                
                2 选择 '提升为...'
                
                    弹出 '提升的类' 对话框   
                
                        a.在'提升的类名称'选项中 输入 自定义的按键类名 'CaBtn'
                
                        b.在'头文件'选项中 输入 新建的文件名 'ca_btn' (不要写扩展名'.py',也不用写路径路径，因为该文件的路径在系统文件夹下)
                
                        c.这时，'添加'按钮可用，点击'添加'按钮，
                
                        d.这时，'提升'按钮可用，再点击'提升'按钮。
                    
       
        动态属性的添加

            给按键添加的用于样式的属性 bg: gray、lightgray、orange 

            给按键添加的用于计算功能的属性 role: 数字（num）、运算符（op）、清空AC（ac）、计算=（ca）、正负（+/- zf）、百分号（% bf）

            以给所有数字键添加 bg 属性 为例:  数字键 bg属性的值为gray
                1 选择所有的数字键
                2 在 右边的 属性编辑器 选择绿色的‘+’
                    弹出下拉菜单，选择‘字符串’
                    弹出'创建动态属性'对话框，填写属性名称'bg'，这时'ok'按钮可用，点击'ok'按钮。
                    这时，右边的 属性编辑器 中在 动态属性 里 多出 'bg' 属性的条目，光标在其右边的值输入框中闪烁。
                    在闪烁的值输入框中，输入值'gray'。


        为一堆按钮设置自动排他性（互斥）autoExclusive，checkable可被选择。

        le的readonly设置，对齐设置Alignment:AlignRight 右对齐。

    布局
        布局的尺寸策略：
            qt默认就已经为所有控件设置了合适的尺寸策略
                # 比如按钮和标签的尺寸策略就不同： 标签可以随窗口水平和垂直拉伸，按钮则只能在水平方向拉伸
            
            QSizePolicy.Fixed       不缩放 固定

            QSizePolicy.Minimum     以名义尺寸为最小尺寸，
                                    先拉伸其他的控件，当其他的控件拉伸不能拉伸，才开始拉伸，
                                    压缩则刚好相反，先把自己压缩到不能压缩，才开始压缩其他控件
                                    

            QSizePolicy.Maximum     以名义尺寸为最大尺寸，
                                    先压缩其他的控件，当其他的控件拉伸不能压缩，才开始压缩。
                                    拉伸则刚好相反，先拉伸到不能拉伸，才开始拉伸其他控件
            
            QSizePolicy.Preferred   以名义尺寸为第一级最小尺寸 ，压缩至此，不再压缩，
                                    当其余控件所有空白都归零(即压到底)，才开始压缩至最小尺寸。
                                    拉伸刚好是反的。

            QSizePolicy.Expanding   在剩余地方扩展 挤占剩余的空白

            QSizePolicy.Ignored     可以缩小到没有


        用尺寸策略对象设置尺寸策略
            # 定义尺寸策略对象 （水平策略，垂直策略）
            sp=QSizePolicy(QSizePolicy.Fixed,QSizePolicy.Ignored)

            # 设置 当lb1隐藏也保留位置 必须放在尺寸策略设置之前，才有效
            sp.setRetainSizeWhenHidden(True)
            lb1.setSizePolicy(sp)

    样式
        对于一个控件来说，要不就在设计师designer设置样式，要不就通过外在文件设置样式。
        不要两者混用，会搞出许多莫名其妙的问题。

        由于动态样式只能使用外部引入的方式，因此决定了本控件 使用 样式文件 加载方式 设置样式。
        在自定义控件类中：
            采用引入样式文件的方式加载样式。
            动态样式的使用。

    虚拟控件
        工具控件：
            提供功能函数
            定义信号并发射信号

主调度文件main.py:
    
    1 将项目路径加入系统路径
    
    2 从view引入各个ui界面类
    
    3 定义App：

        1 初始化各个界面
            
        2 显示主界面 登录界面
           
        3 实现各个界面打开和退出 
            通过信号 与 槽

打包：
    pyinstaller -F main.py -w
    用最简单的打包方式 
        -F 单个文件
        -w 不带命令行调试窗口 